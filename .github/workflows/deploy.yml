name: CI/CD

on:
  workflow_run:
    workflows: ["tests"]
    types:
      - completed

jobs:
  build_and_push:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push Docker Image
        id: build_push
        run: docker buildx build --push --no-cache -t ghcr.io/${{ github.repository_owner }}/ittt-bot:${{github.sha}} .

      - name: "Clean up old Docker images (Retention: keep latest 5)"
        env:
          GH_TOKEN: ${{ secrets.GHCR_PAT }}
          REPO: ${{ github.repository_owner }}/ittt-bot
        run: |
          echo "Cleaning up old Docker images..."

          TAGS_TO_DELETE=$(gh api -H "Accept: application/vnd.github+json" \
            /users/${{ github.repository_owner }}/packages/container/ittt-bot/versions \
            --jq '.[] | {id: .id, created_at: .created_at, metadata: .metadata.container.tags[0]} | @json' | \
            jq -s 'sort_by(.created_at) | reverse | .[5:] | .[].id')

          if [ -n "$TAGS_TO_DELETE" ]; then
            for ID in $TAGS_TO_DELETE; do
              echo "Deleting package version ID: $ID"
              gh api --method DELETE /user/packages/container/ittt-bot/versions/$ID
            done
          else
            echo "No old images to delete"
          fi

  # deploy:
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: [self-hosted]
  #   needs: build_and_push
  #   steps:
  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3.4.0
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GHCR_PAT }}

  #     - name: Create .env file
  #       run: |
  #         cat <<EOF > .env
  #         GITHUB_ID=${{ secrets.NEXTAUTH_GITHUB_ID }}
  #         GITHUB_SECRET=${{ secrets.NEXTAUTH_GITHUB_SECRET }}
  #         NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
  #         DB_NAME=${{ vars.DB_NAME }}
  #         DB_USER=${{ vars.DB_USER }}
  #         DB_PASSWORD=${{ secrets.DB_PASSWORD }}
  #         DATABASE_URL=postgresql://${{ vars.DB_USER }}:${{ secrets.DB_PASSWORD }}@db:5432/${{ vars.DB_NAME }}
  #         POSTGRES_DB=${{ vars.DB_NAME }}
  #         POSTGRES_USER=${{ vars.DB_USER }}
  #         POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
  #         SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
  #         NEXT_PUBLIC_SENTRY_DSN=${{ vars.NEXT_PUBLIC_SENTRY_DSN }}
  #         SERVER_SENTRY_DSN=${{ vars.SERVER_SENTRY_DSN }}
  #         NEXTAUTH_URL=https://itadaki.app
  #         IMAGE_TAG=${{ github.sha }}
  #         REPO_OWNER=${{ github.repository_owner }}
  #         AUTH_TRUST_HOST=true
  #         USDA_API_KEY=${{ vars.USDA_API_KEY }}
  #         EOF

  #     - name: "Pull latest Docker image by commit SHA tag"
  #       run: docker pull ghcr.io/${{ github.repository_owner }}/ittt-bot:${{ github.sha }}

  #     - name: create override file
  #       run : |
  #           cat <<EOF > docker-compose.override.yml
  #           services:
  #               itadaki_web:
  #                   image: ghcr.io/${{ github.repository_owner }}/ittt-bot:${{ github.sha }}
  #           EOF
  #     - name: Start containers using pulled image
  #       run: docker compose --env-file .env -f docker-compose.prod.yml -f docker-compose.override.yml up -d --remove-orphans --force-recreate

  #     - name: Run Prisma migrations
  #       run: docker compose exec itadaki_web npx prisma migrate deploy

  #     - name: Run Prisma seed
  #       run: docker compose exec itadaki_web npx prisma db seed

  #     - name: Clean up unused Docker resources
  #       run: docker system prune -af
