name: deploy

on:
  workflow_run:
    workflows: ["tests"]
    types:
      - completed

jobs:
  build_and_push:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and Push PHP-FPM Image
        run: |
          docker buildx build \
            --push \
            --tag ghcr.io/${{ github.repository_owner }}/ittt-bot-php-fpm:${{ github.sha }} \
            --target production \
            --no-cache \
            -f docker/common/php-fpm/Dockerfile .

      - name: Build and Push Web (Nginx) Image
        run: |
          docker buildx build \
            --push \
            --tag ghcr.io/${{ github.repository_owner }}/ittt-bot-web:${{ github.sha }} \
            --no-cache \
            -f docker/production/nginx/Dockerfile .

      - name: "Clean up old Docker images (Retention: keep latest 5)"
        env:
          GH_TOKEN: ${{ secrets.GHCR_PAT }}
        run: |
          for IMAGE in ittt-bot-web ittt-bot-php-fpm; do
            echo "Cleaning up old versions for $IMAGE..."
            TAGS_TO_DELETE=$(gh api -H "Accept: application/vnd.github+json" \
              /users/${{ github.repository_owner }}/packages/container/$IMAGE/versions \
              --jq '.[] | {id: .id, created_at: .created_at} | @json' | \
              jq -s 'sort_by(.created_at) | reverse | .[5:] | .[].id')

            if [ -n "$TAGS_TO_DELETE" ]; then
              for ID in $TAGS_TO_DELETE; do
                echo "Deleting package version ID: $ID for $IMAGE"
                gh api --method DELETE /user/packages/container/$IMAGE/versions/$ID
              done
            else
              echo "No old images to delete for $IMAGE"
            fi
          done

  deploy:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    runs-on: [self-hosted]
    needs: build_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Create .env file
        run: |
          cat <<EOF > .env
          IMAGE_TAG=${{ github.sha }}
          REPO_OWNER=${{ github.repository_owner }}
          NGINX_PORT=8004

          APP_NAME=ITTT_BOT
          APP_ENV=production
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=true
          APP_URL=https://ittt-bot.app

          APP_LOCALE=en
          APP_FALLBACK_LOCALE=en
          APP_FAKER_LOCALE=en_US

          APP_MAINTENANCE_DRIVER=file
          # APP_MAINTENANCE_STORE=database

          PHP_CLI_SERVER_WORKERS=4

          BCRYPT_ROUNDS=12

          LOG_CHANNEL=stderr
          LOG_STACK=single
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=info

          DB_CONNECTION=pgsql
          DB_HOST=${{ vars.DB_HOST }}
          DB_PORT=5432
          DB_DATABASE=${{ vars.DB_NAME }}
          DB_USERNAME=${{ vars.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          POSTGRES_DB=${{ vars.DB_NAME }}
          POSTGRES_USER=${{ vars.DB_USER }}
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}

          SESSION_DRIVER=database
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          SESSION_PATH=/
          SESSION_DOMAIN=null

          BROADCAST_CONNECTION=log
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=database

          CACHE_STORE=database
          # CACHE_PREFIX=

          MEMCACHED_HOST=127.0.0.1

          REDIS_CLIENT=phpredis
          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379

          MAIL_MAILER=brevo
          MAIL_SCHEME=null
          MAIL_HOST=127.0.0.1
          MAIL_PORT=2525
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_FROM_ADDRESS="bot@ittt-bot.app"
          MAIL_FROM_NAME="ITTT Bot"

          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false

          VITE_APP_NAME=ITTT_BOT

          # API KEYS
          
          WEATHERAPI_KEY=${{ secrets.WEATHERAPI_KEY }}
          WEATHERAPI_BASE_URI=https://api.weatherapi.com
          BREVO_KEY=${{ secrets.BREVO_KEY }}
          EOF

      - name: Pull web image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/ittt-bot-web:${{ github.sha }}

      - name: Pull PHP-FPM image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/ittt-bot-php-fpm:${{ github.sha }}

      - name: create override file
        run : |
            cat <<EOF > docker-compose.override.yaml
            volumes:
              ittt-bot-public-assets-${{ github.sha }}:
            services:
              web:
                image: ghcr.io/${{ github.repository_owner }}/ittt-bot-web:${{ github.sha }}
              php-fpm:
                image: ghcr.io/${{ github.repository_owner }}/ittt-bot-php-fpm:${{ github.sha }}
              scheduler:
                image: ghcr.io/${{ github.repository_owner }}/ittt-bot-php-fpm:${{ github.sha }}
            EOF

      - name: Start containers using pulled image
        run: docker compose --env-file .env -f compose.prod.yaml -f docker-compose.override.yaml up -d --remove-orphans --force-recreate

      - name: Clean up unused Docker resources
        run: docker system prune --volumes -af
